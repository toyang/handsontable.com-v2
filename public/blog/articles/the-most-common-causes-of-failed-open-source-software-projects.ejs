<section class="post" itemid="https://handsontable.com/<%= current.source %>" itemscope itemtype="http://schema.org/BlogPosting">
    <div class="row">
        <div class="large-6 large-centered columns">
            <h2 class="headline" itemprop="headline">
                The Most Common Causes of Failed Open-Source Software Projects
            </h2>
            <div class="meta-details">
                <span>
                    <img src="../attachments/authors/chris-meier.png" alt="Chris Meier" />
                    <label>Chris Meier</label>
                </span>
                <span><a href="/blog/categories/startups">Startups</a> / April 29, 2016</span>
                <meta itemprop="datePublished" content="2016-04-29T12:00:00+01:00"/>
                <meta itemprop="dateModified" content="2016-04-29T12:00:00+01:00"/>
                <span><a href="#disqus_thread"></a></span>
            </div>
        </div>
    </div>
    <article class="row body">
        <div class="large-8 medium-12 large-centered columns">
            <p itemprop="image" itemscope itemtype="https://schema.org/ImageObject">
                <img src="../attachments/images/the-most-common-causes-of-failed-open-source-software-projects.png" alt="The Most Common Causes of Failed Open-Source Software Projects" />
                <meta itemprop="url"
                      content="https://handsontable.com/blog/attachments/images/the-most-common-causes-of-failed-open-source-software-projects.png">
                <meta itemprop="width" content="757">
                <meta itemprop="height" content="441">
            </p>

            <p>
                Nobody has ever achieved success without making some mistakes, and writing off a few failures.
                But just as we (hopefully) learn from our own mistakes, we can also learn from the mistakes made by
                others, helping us sidestep failure by knowing what to look out for, and how to respond/react.
            </p>
            <p>
                The purpose of this article is not to scare you away from launching your own OSS project, but rather
                to highlight the most common causes of failed projects, and to offer some guidance in avoiding them.
            </p>
            <h3>
                The 3 Primary Types of Open-Source Software Projects
            </h3>
            <p>
                Without wanting to over-simplify things, most OSS projects can be graded as follows:
            </p>
            <ul>
                <li>
                    <strong>Easy Projects</strong> - dubbed easy because they are relatively simple to create and
                    maintain. These projects mature quite quickly, after which there is seldom a need for any major
                    refactoring, and they continue to perform solidly for many years.
                </li>
                <li>
                    <strong>Small to Mid-Size Projects</strong> - these are projects that are fairly complex, and
                    require a high-level of maintenance in order to continue working well within an ever changing
                    technological landscape. Examples include small libraries such as 
                    <a href="http://numeraljs.com/">NumeralJS</a>, and projects like
                    <a href="http://jade-lang.com/">JADE</a>.
                </li>
                <li>
                    <strong>Large-Scale Projects</strong> - these are projects that (whether planned or not) evolve
                    to be so complex and vast that they are no longer able to be maintained by a single developer.
                    The only way these projects avoid a total collapse is by going commercial, or through the
                    involvement of a passionate community who all work together to develop and maintain the project.
                    Good examples of these projects include
                    <a href="http://bower.io/">Bower</a>, <a href="http://gruntjs.com/">Grunt</a>, popular CSS and JS
                    frameworks, content
                    management systems (CMS), and projects such as
                    <a href="http://ckeditor.com/">CKEditor</a>, HighCharts and Handsontable.
                </li>
            </ul>
            <h3>
                Common Causes of Failure
            </h3>
            <p>
                Although there are many reasons why any venture could fail, when it comes to OSS projects we are able
                to split the reasons between one of two categories that influence the cause of failure.
            </p>
            <p>
                <strong>
                    Developer/Author Related Failures
                </strong>
            </p>
            <ul>
                <li>
                    <strong>Lack of Interest</strong> - this is specific to a lack of interest by the original developer/author,
                    not users or the community. Whatever it is that causes the developer/author to start losing interest
                    in the project, it inevitably ends with the project being abandoned.
                </li>
                <li>
                    <strong>Lack of Patience</strong> - some users and communities can be quite demanding when it comes to
                    requesting features and updates, and a developer without the temperament to manage this will more
                    than likely walk away (and worst-case scenario, delete the project too).
                </li>
                <li>
                    <strong>Lack of Time/Money</strong> - all open-source projects require the developer/author to invest time.
                    But some also require a financial investment, either direct in the form of paying for services and
                    infrastructure, or indirect by turning down paid freelance work. If either one of these is more
                    than what the developer/author can afford, the risk of the project being abandoned increases.
                </li>
                <li>
                    <strong>Change of Profession</strong> - any change in career or profession by the developer/author can
                    jeopardise the future of an open-source project as their priorities and focus shift.
                </li>
                <li>
                    <strong>Creative Differences</strong> - any open-source project worked on by two or more people risks
                    facing a creative differences moment which, if not managed properly, could lead to a split, and
                    the project being forked. And if the community is too fragmented after the split, both projects
                    risk being abandoned.
                </li>
            </ul>
            <p>
                <strong>
                    Project Related Failures
                </strong>
            </p>
            <ul>
                <li>
                    <strong>Technology</strong> - as a developer you would need no reminding that technology is constantly
                    changing, and even large corporations can be affected by this, as evidenced by Adobe Flash and
                    Microsoft Silverlight effectively killed off by HTML5.
                </li>
                <li>
                    <strong>Scale</strong> - sometimes what starts off as a small project eventually evolves into something too
                    large for a single developer to manage, and unless the community steps in and assists, the project
                    risks limping towards abandonment.
                </li>
                <li>
                    <strong>Legal Problems</strong> - very few open-source software developers have the resources to confidently
                    respond to legal challenges from larger businesses, inevitably resulting in their project being
                    abandoned and deleted.
                </li>
                <li>
                    <strong>Acquisition</strong> - standard acquisitions don't necessarily mean a project has failed, especially
                    if the original project remains largely open-source, but with greater access to resources. But
                    there is a trend towards acquihiring, where the original project is shut down, and the developers
                    assimilated by the new company.
                </li>
                <li>
                    <strong>Poor Documentation</strong> - documentation that is either difficult to understand, or written by a
                    non-native English speaker can hurt an otherwise great piece of software, especially if it is then
                    ignored by the community.
                </li>
                <li>
                    <strong>Poor Execution</strong> - similarly, a project that fails to deliver will eventually be ignored by
                    the community too. These includes projects that are difficult to install, setup and use, poorly
                    coded projects, and projects that still use old technology.
                </li>
                <li>
                    <strong>Usurped by competitor</strong> - developers always need to be aware of what their competitors are
                    doing, and this includes indirect competitors. Failure to do so can result in a competitor
                    releasing a far superior product that includes features your users have asked for, but you have
                    not yet implemented.
                </li>
            </ul>
            <h3>
                How to Avoid Failure
            </h3>
            <p>
                Careful planning and a solid development roadmap can help you somewhat in avoiding failure; but
                awareness, acceptance, and humility are just as important. This means knowing and accepting when:
            </p>
            <ul>
                <li>
                    You start losing interest in the project.
                </li>
                <li>
                    The project starts becoming too big for you to effectively manage on your own.
                </li>
                <li>
                    Your skills start limiting what you are able to achieve on your own.
                </li>
                <li>
                    The project starts costing you more time and/or money than you can afford.
                </li>
            </ul>
            <p>
                and it means having the humility to turn to the community and ask for help. Help from the community
                can take the form of:
            </p>
            <ul>
                <li>
                    Handing the project over to the community by asking them to fork and maintain it.
                </li>
                <li>
                    Hiring developers to help you, or asking the community for help in overcoming
                    development roadblocks.
                </li>
                <li>
                    <a href="https://handsontable.com/blog/articles/5-successful-business-models-for-web-based-open-source-projects">
                        Adding a commercial element to your project
                    </a>, so that you can generate revenue; making it easier
                    to commit more time and resources to the project.
                </li>
            </ul>
            <p>
                Depending on how many people use your software, asking for help can deliver some amazing results.
                Just remember that transparency and honesty go a long way in helping you retain the support of the
                community, as does a reputation for stable releases ahead of frequent updates.
            </p>
            <h3>
                Conclusion
            </h3>
            <p>
                The risk of failure should never deter you from doing something new, or following your dreams.
                Especially if you know what some of the risks are, and how to mitigate them.
                <a href="http://www.highcharts.com/">Highcharts</a> started out
                as a side-project for Torstein Hønsi, and since 2009 Highsoft has grown its client-base, product
                range and staff compliment. Similarly,
                <a href="https://handsontable.com/">Handsontable</a> also began as an OSS project, and has grown to
                include commercial features, and more team members than they first started out with.
            </p>
            <p>
                You determine how your own story ends, so what are you waiting for?
            </p>
            <div class="addthis_native_toolbox toolbox"></div>
        </div>
    </article>

    <div itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
        <div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject">
            <meta itemprop="url" content="http://handsoncode.net/images/logos/logo.png">
            <meta itemprop="width" content="175">
            <meta itemprop="height" content="25">
        </div>
        <meta itemprop="name" content="Handsoncode">
    </div>

    <%- partial("../authors/_cmeier") %>
</section>