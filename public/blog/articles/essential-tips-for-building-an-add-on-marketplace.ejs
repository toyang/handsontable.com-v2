<section class="post" itemid="https://handsontable.com/<%= current.source %>" itemscope
         itemtype="http://schema.org/BlogPosting" xmlns="http://www.w3.org/1999/html">
    <div class="row">
        <div class="large-6 large-centered columns">
            <h2 class="headline" itemprop="headline">
                Essential Tips for Building an Add-On Marketplace
            </h2>
            <div class="meta-details">
                <span>
                    <img src="../attachments/authors/chris-meier.png" alt="Chris Meier" />
                    <label>Chris Meier</label>
                </span>
                <span><a href="/blog/categories/startups">Startups</a> / October 7, 2016</span>
                <meta itemprop="datePublished" content="2016-10-07T12:00:00+01:00"/>
                <meta itemprop="dateModified" content="2016-10-07T12:00:00+01:00"/>
                <span><a href="#disqus_thread"></a></span>
            </div>
        </div>
    </div>
    <article class="row body">
        <div class="large-8 medium-12 large-centered columns">
            <p itemprop="image" itemscope itemtype="https://schema.org/ImageObject">
                <img src="../attachments/images/essential-tips-for-building-an-add-on-marketplace.png"
                     alt="Essential Tips for Building an Add-On Marketplace " />
                <meta itemprop="url"
                      content="https://handsontable.com/blog/attachments/images/essential-tips-for-building-an-add-on-marketplace.png">
                <meta itemprop="width" content="757">
                <meta itemprop="height" content="441">
            </p>


            <p>
                The practice of extending the functionality of a product through the use of add-ons is not new, nor
                is the concept of making these plugins available through a marketplace. You can offer all the features
                that your customers require, while allowing customers to add features only they need.
                However, there are a number of factors you need to carefully consider
                before going this route: from deciding whether your marketplace is going to be limited to in-house
                developed add-ons, or open to community submissions, through to how you will manage the compatibility
                of the add-ons and plugins.
            </p>
            <p>
                Below we will outline some of the points you need to consider before making any firm decisions.
            </p>
            <h3>
                Know the Purpose of your Marketplace
            </h3>
            <p>
                Begin by knowing why you want/need a marketplace for your product, and what the purpose of it will be.
                Be honest in answering questions such as:
            </p>
            <ul>
                <li>
                    Would your product, and its users, benefit from add-ons, plugins, etc. offered through a
                    marketplace? If so, list the benefits.
                </li>
                <li>
                    Is further development of your product being hindered by the lack of a marketplace? Although this
                    question is similar to the previous one, it is worth answering independently, this time by also
                    listing actual ways in which development is being held back.
                </li>
            </ul>
            <p>
                If after answering these questions you still believe you need a marketplace, move on to establishing
                whether the marketplace will only list add-ons and plugins developed in-house, or will it be open to
                submissions from other developers? Although in-house only offers you the greatest control, it is also
                limited to what you are able to produce. Either way, you still would need to decide how the add-ons
                and plugins will integrate with your core product, and this includes matters such as support.
            </p>
            <h3>
                Select the Right Marketplace Platform
            </h3>
            <p>
                Your decision making doesn't end at establishing why you need a marketplace, and what its purpose will
                be; if anything, it is merely the first of many decisions you will have to make relating to your
                marketplace, with the next being whether you are going to build your own marketplace, or use one of
                the many existing marketplaces such as
                <a href="http://www.binpress.com/" target="_blank">BinPress</a>,
                <a href="https://codecanyon.net/" target="_blank">CodeCanyon</a> or
                <a href="https://www.codester.com/" target="_blank">Codester</a>.
            </p>
            <p>
                There are pros and cons relating to both, so again it is not an easy decision to make. The biggest
                plus of using an existing marketplace is exposure, with well-known marketplaces having thousands of
                users, and established trust. The downside is that you have little control over what is submitted and
                approved (if you allow independent developers to create add-ons for your product), and no control
                over the commission structure.
            </p>
            <p>
                Building your own marketplace sees you retain control over submissions, but it requires more effort
                from you to build and manage, not forgetting the extra time it may take to get it noticed, and to
                build up the number of users. Opening the marketplace to community submissions can make this somewhat
                easier, especially in terms of word-of-mouth marketing, and rapidly building up the selection of
                add-ons and plugins available.
            </p>
            <h3>
                Have a Clear Pricing Model
            </h3>
            <p>
                Remembering that building your own marketplace gives you greater control over the types of add-ons
                and plugins that are made available to your users, it is advisable to publish detailed guidelines for
                developers before you launch your marketplace. An important component of your guidelines would be
                your pricing model, covering everything from your commission structure, through to fixed or suggested
                pricing for add-on and plugins. Small simple add-ons and plugins - which offer basic enhancements -
                should have a lower price than those that offer more complex enhancements, and this should be clear
                to both your developers and your users.
            </p>
            <p>
                At the same time, your guidelines should specify what types of add-ons and plugins you accept: is the
                marketplace only for simple extensions, more powerful and complex enhancements, or a mix of both?
            </p>
            <p>
                Existing marketplaces generally allow developers to determine their own selling price, but still
                you will notice a uniformity in the prices charged, but keep in mind that here the pricing structure,
                and submission guidelines, are completely out of your hands.
            </p>
            <h3>
                Cover all Legal Issues
            </h3>
            <p>
                The various existing marketplaces previously referred to all have guidelines in place that cover many
                aspects of the submission process, from licensing through to support, product integration, etc. As
                mentioned in the previous point, if you choose to launch your own marketplace, this is something
                you will need to compile on your own. Don't take any shortcuts here; start by working through the
                guidelines published by existing marketplaces, making sure your own guidelines address most of the
                points they cover. Look at points such as:
            </p>
            <ul>
                <li>
                    what software license should be used,
                </li>
                <li>
                    what
                    <a href="https://docs.handsontable.com/pro/1.3.4/tutorial-custom-plugin.html" target="_blank">
                        standards should be adhered to when developing add-ons and plugins</a>,
                </li>
                <li>
                    what level of support you expect developers to offer to users of their add-on or plugin,
                </li>
                <li>
                    what the purchase price includes: does it include a lifetime of support and upgrades,
                    or only for a set period,
                </li>
                <li>
                    how you will manage complaints and refund requests/chargebacks, and what you expect from
                    developers with regards to this too. The process should be fair and simple, and should not
                    disadvantage anyone.
                </li>
            </ul>
            <p>
                Get your legal team to assess the guidelines before publishing, to ensure that you are not exposing
                yourself - and your customers - to any liability, and that the license of your core product
                is still correct.
            </p>
            <h3>
                Ensure it is Open
            </h3>
            <p>
                Your marketplace should not be like the VIP section of a club: reserved for the chosen few. It
                should be visible, and easy to access, navigate and use. This applies to both customers and
                developers - if you allow developers to submit their own add-ons and plugins. This means that
                the submission process for developers must be simple, the review process must be relatively fast,
                and any rejections (hard or soft) must include enough information for the developer to easily
                understand what was wrong, and how to correct it.
            </p>
            <p>
                For customers, registration must be easy, the navigation must be simple - if you use categories,
                make sure they have useful names, and are properly organised - and shopping cart management and
                checkout should be almost as easy as registration. Adding a rating and review system adds a bit
                of social proof, but benefits customers too in that they are able to see what other users thought
                of each add-on or plugin.
            </p>
            <p>
                As noted by
                <a href="http://thenextweb.com/entrepreneur/2013/05/04/how-to-win-with-marketplaces-the-three-success-factors/" target="_blank">

                Sangeet Paul Choudary:</a>
            </p>
            <blockquote>
                On a marketplace, the ability to search and transact/interact should be as intuitive as possible.
                Beyond that, the look-and-feel and design are purely hygiene factors. Unlike social networks,
                marketplaces are transactional and users typically don’t have long visit lengths engaging with the product.
            </blockquote>
            <h3>
                It Should be the "Sun" in Your Product "Universe"
            </h3>
            <p>
                Leading on from the previous point, your marketplace should be central to your primary product.
                This doesn't imply that your primary product should be barebones and hardly functional without
                add-ons and plugins. It must be fully functional, but with add-ons and plugins that extend the
                functionality; and this should be highlighted throughout. Navigating to your marketplace should be
                easy from any page of your website, your feature list should call attention to the marketplace and
                the ability to extend the functionality of your product, and updates to your product should be
                balanced with the add-ons and plugins already available in your marketplace.  Add-ons and plugins
                should always offer enhancements that benefit some - not all - of your users, while features that
                would benefit most of your users should continue to be added to your core product.
            </p>
            <p>
                And don’t forget that once you launch your marketplace, you should communicate this to all your
                existing customers.
            </p>
            <h3>
                Simple Demo's &amp Clear Product Descriptions
            </h3>
            <p>
                Many factors influence a user's decision to buy an add-on or plugin, but two key determinants are the
                clarity of the product description, and the ability to "try before you buy". Product descriptions
                should be clear, detailed and honest, listing specific features that the add-on or plugin offers.
                Extend this further by ensuring that each add-on or plugin comes with a detailed Read Me file that
                provides instructions on how to install/uninstall it, and how to use it. Finally, offering
                full-featured - but time-limited - demo's of each add-on/plugin will make it even simpler for
                your customers to decide whether they will benefit from a specific add-on/plugin.
            </p>
            <h3>
                Don't Forget About Compatibility
            </h3>
            <p>
                Perhaps the most challenging aspect of offering a marketplace with add-ons and plugins, is maintaining
                compatibility. You need to have a strong system in place for managing the compatibility of all add-ons
                and plugins with your core product, and if you do not have the resources to manage this for community
                submissions, you may want to limit your marketplace to only offering add-ons and plugins you have
                developed in-house. All add-ons and plugins should almost immediately be compatible with the latest
                version of your product, but considering that not all customers immediately update to the latest
                version, they should also offer some backwards compatibility. Poor maintenance and support on add-ons
                and plugins doesn't only reflect unfavourably on your developers, it can influence your customer's
                perception of your company and your core product.
            </p>


            <div class="addthis_native_toolbox toolbox"></div>
        </div>
    </article>

    <div itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
        <div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject">
            <meta itemprop="url" content="http://handsoncode.net/images/logos/logo.png">
            <meta itemprop="width" content="175">
            <meta itemprop="height" content="25">
        </div>
        <meta itemprop="name" content="Handsoncode">
    </div>

    <%- partial("../authors/_cmeier") %>
</section>